//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `sortedChnames.plist`.
    static let sortedChnamesPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "sortedChnames", pathExtension: "plist")
    
    /// `bundle.url(forResource: "sortedChnames", withExtension: "plist")`
    static func sortedChnamesPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sortedChnamesPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 84 images.
  struct image {
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `assistivetouch`.
    static let assistivetouch = Rswift.ImageResource(bundle: R.hostingBundle, name: "assistivetouch")
    /// Image `failure`.
    static let failure = Rswift.ImageResource(bundle: R.hostingBundle, name: "failure")
    /// Image `ic-about`.
    static let icAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-about")
    /// Image `ic-check`.
    static let icCheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-check")
    /// Image `ic_01background`.
    static let ic_01background = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_01background")
    /// Image `ic_01equipment_click`.
    static let ic_01equipment_click = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_01equipment_click")
    /// Image `ic_01equipment`.
    static let ic_01equipment = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_01equipment")
    /// Image `ic_01nothing`.
    static let ic_01nothing = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_01nothing")
    /// Image `ic_02mode_click`.
    static let ic_02mode_click = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_02mode_click")
    /// Image `ic_02mode`.
    static let ic_02mode = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_02mode")
    /// Image `ic_02nothing`.
    static let ic_02nothing = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_02nothing")
    /// Image `ic_03nothing`.
    static let ic_03nothing = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_03nothing")
    /// Image `ic_03user_click`.
    static let ic_03user_click = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_03user_click")
    /// Image `ic_03user`.
    static let ic_03user = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_03user")
    /// Image `ic_04nothing`.
    static let ic_04nothing = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_04nothing")
    /// Image `ic_05nothing`.
    static let ic_05nothing = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_05nothing")
    /// Image `ic_06nothing`.
    static let ic_06nothing = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_06nothing")
    /// Image `ic_2normal_random`.
    static let ic_2normal_random = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_2normal_random")
    /// Image `ic_2random01`.
    static let ic_2random01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_2random01")
    /// Image `ic_2random02`.
    static let ic_2random02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_2random02")
    /// Image `ic_3normal_random`.
    static let ic_3normal_random = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_3normal_random")
    /// Image `ic_3random01`.
    static let ic_3random01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_3random01")
    /// Image `ic_3random02`.
    static let ic_3random02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_3random02")
    /// Image `ic_addequipment1`.
    static let ic_addequipment1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_addequipment1")
    /// Image `ic_addhome`.
    static let ic_addhome = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_addhome")
    /// Image `ic_air`.
    static let ic_air = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_air")
    /// Image `ic_arrow03`.
    static let ic_arrow03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow03")
    /// Image `ic_arrow`.
    static let ic_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_backblack`.
    static let ic_backblack = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_backblack")
    /// Image `ic_choose2`.
    static let ic_choose2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_choose2")
    /// Image `ic_choose3`.
    static let ic_choose3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_choose3")
    /// Image `ic_cup`.
    static let ic_cup = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cup")
    /// Image `ic_echo`.
    static let ic_echo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_echo")
    /// Image `ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit")
    /// Image `ic_facebook`.
    static let ic_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_facebook")
    /// Image `ic_googlehome`.
    static let ic_googlehome = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_googlehome")
    /// Image `ic_home`.
    static let ic_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home")
    /// Image `ic_humidiity`.
    static let ic_humidiity = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_humidiity")
    /// Image `ic_information`.
    static let ic_information = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_information")
    /// Image `ic_isukeloge02`.
    static let ic_isukeloge02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_isukeloge02")
    /// Image `ic_leave`.
    static let ic_leave = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_leave")
    /// Image `ic_light`.
    static let ic_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_light")
    /// Image `ic_link`.
    static let ic_link = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_link")
    /// Image `ic_loading`.
    static let ic_loading = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_loading")
    /// Image `ic_more`.
    static let ic_more = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more")
    /// Image `ic_off01`.
    static let ic_off01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_off01")
    /// Image `ic_opinion`.
    static let ic_opinion = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_opinion")
    /// Image `ic_others03`.
    static let ic_others03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_others03")
    /// Image `ic_others`.
    static let ic_others = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_others")
    /// Image `ic_pm`.
    static let ic_pm = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pm")
    /// Image `ic_portrait`.
    static let ic_portrait = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_portrait")
    /// Image `ic_problem`.
    static let ic_problem = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_problem")
    /// Image `ic_prompt03`.
    static let ic_prompt03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_prompt03")
    /// Image `ic_promptbg3`.
    static let ic_promptbg3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_promptbg3")
    /// Image `ic_promptflash01`.
    static let ic_promptflash01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_promptflash01")
    /// Image `ic_promptflash02`.
    static let ic_promptflash02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_promptflash02")
    /// Image `ic_question`.
    static let ic_question = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_question")
    /// Image `ic_quit`.
    static let ic_quit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_quit")
    /// Image `ic_saysth`.
    static let ic_saysth = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_saysth")
    /// Image `ic_setting`.
    static let ic_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_setting")
    /// Image `ic_sharetosb`.
    static let ic_sharetosb = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sharetosb")
    /// Image `ic_socket2`.
    static let ic_socket2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_socket2")
    /// Image `ic_socket`.
    static let ic_socket = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_socket")
    /// Image `ic_socketbg001`.
    static let ic_socketbg001 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_socketbg001")
    /// Image `ic_socketbg`.
    static let ic_socketbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_socketbg")
    /// Image `ic_sun`.
    static let ic_sun = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sun")
    /// Image `ic_switch_off`.
    static let ic_switch_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_switch_off")
    /// Image `ic_switch_on`.
    static let ic_switch_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_switch_on")
    /// Image `ic_temperature`.
    static let ic_temperature = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_temperature")
    /// Image `ic_topbg02`.
    static let ic_topbg02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_topbg02")
    /// Image `ic_topbg03`.
    static let ic_topbg03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_topbg03")
    /// Image `ic_topbg04`.
    static let ic_topbg04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_topbg04")
    /// Image `ic_topbg05`.
    static let ic_topbg05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_topbg05")
    /// Image `ic_topbg`.
    static let ic_topbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_topbg")
    /// Image `ic_turnon`.
    static let ic_turnon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_turnon")
    /// Image `ic_voice01`.
    static let ic_voice01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_voice01")
    /// Image `ic_voice02`.
    static let ic_voice02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_voice02")
    /// Image `ic_weather`.
    static let ic_weather = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_weather")
    /// Image `ic_wifi `.
    static let ic_wifi = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wifi ")
    /// Image `ic_youtube`.
    static let ic_youtube = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_youtube")
    /// Image `icon`.
    static let icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon")
    /// Image `topbg`.
    static let topbg = Rswift.ImageResource(bundle: R.hostingBundle, name: "topbg")
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "assistivetouch", bundle: ..., traitCollection: ...)`
    static func assistivetouch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.assistivetouch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "failure", bundle: ..., traitCollection: ...)`
    static func failure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.failure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-about", bundle: ..., traitCollection: ...)`
    static func icAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icAbout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic-check", bundle: ..., traitCollection: ...)`
    static func icCheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCheck, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_01background", bundle: ..., traitCollection: ...)`
    static func ic_01background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_01background, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_01equipment", bundle: ..., traitCollection: ...)`
    static func ic_01equipment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_01equipment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_01equipment_click", bundle: ..., traitCollection: ...)`
    static func ic_01equipment_click(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_01equipment_click, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_01nothing", bundle: ..., traitCollection: ...)`
    static func ic_01nothing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_01nothing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_02mode", bundle: ..., traitCollection: ...)`
    static func ic_02mode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_02mode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_02mode_click", bundle: ..., traitCollection: ...)`
    static func ic_02mode_click(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_02mode_click, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_02nothing", bundle: ..., traitCollection: ...)`
    static func ic_02nothing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_02nothing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_03nothing", bundle: ..., traitCollection: ...)`
    static func ic_03nothing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_03nothing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_03user", bundle: ..., traitCollection: ...)`
    static func ic_03user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_03user, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_03user_click", bundle: ..., traitCollection: ...)`
    static func ic_03user_click(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_03user_click, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_04nothing", bundle: ..., traitCollection: ...)`
    static func ic_04nothing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_04nothing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_05nothing", bundle: ..., traitCollection: ...)`
    static func ic_05nothing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_05nothing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_06nothing", bundle: ..., traitCollection: ...)`
    static func ic_06nothing(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_06nothing, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_2normal_random", bundle: ..., traitCollection: ...)`
    static func ic_2normal_random(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_2normal_random, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_2random01", bundle: ..., traitCollection: ...)`
    static func ic_2random01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_2random01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_2random02", bundle: ..., traitCollection: ...)`
    static func ic_2random02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_2random02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_3normal_random", bundle: ..., traitCollection: ...)`
    static func ic_3normal_random(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_3normal_random, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_3random01", bundle: ..., traitCollection: ...)`
    static func ic_3random01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_3random01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_3random02", bundle: ..., traitCollection: ...)`
    static func ic_3random02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_3random02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_addequipment1", bundle: ..., traitCollection: ...)`
    static func ic_addequipment1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_addequipment1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_addhome", bundle: ..., traitCollection: ...)`
    static func ic_addhome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_addhome, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_air", bundle: ..., traitCollection: ...)`
    static func ic_air(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_air, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow", bundle: ..., traitCollection: ...)`
    static func ic_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_arrow03", bundle: ..., traitCollection: ...)`
    static func ic_arrow03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_backblack", bundle: ..., traitCollection: ...)`
    static func ic_backblack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_backblack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_choose2", bundle: ..., traitCollection: ...)`
    static func ic_choose2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_choose2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_choose3", bundle: ..., traitCollection: ...)`
    static func ic_choose3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_choose3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_cup", bundle: ..., traitCollection: ...)`
    static func ic_cup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_echo", bundle: ..., traitCollection: ...)`
    static func ic_echo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_echo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_facebook", bundle: ..., traitCollection: ...)`
    static func ic_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_facebook, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_googlehome", bundle: ..., traitCollection: ...)`
    static func ic_googlehome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_googlehome, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_home", bundle: ..., traitCollection: ...)`
    static func ic_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_humidiity", bundle: ..., traitCollection: ...)`
    static func ic_humidiity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_humidiity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_information", bundle: ..., traitCollection: ...)`
    static func ic_information(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_information, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_isukeloge02", bundle: ..., traitCollection: ...)`
    static func ic_isukeloge02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_isukeloge02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_leave", bundle: ..., traitCollection: ...)`
    static func ic_leave(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_leave, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_light", bundle: ..., traitCollection: ...)`
    static func ic_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_light, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_link", bundle: ..., traitCollection: ...)`
    static func ic_link(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_link, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_loading", bundle: ..., traitCollection: ...)`
    static func ic_loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_loading, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_more", bundle: ..., traitCollection: ...)`
    static func ic_more(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_off01", bundle: ..., traitCollection: ...)`
    static func ic_off01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_off01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_opinion", bundle: ..., traitCollection: ...)`
    static func ic_opinion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_opinion, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_others", bundle: ..., traitCollection: ...)`
    static func ic_others(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_others, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_others03", bundle: ..., traitCollection: ...)`
    static func ic_others03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_others03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_pm", bundle: ..., traitCollection: ...)`
    static func ic_pm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pm, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_portrait", bundle: ..., traitCollection: ...)`
    static func ic_portrait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_portrait, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_problem", bundle: ..., traitCollection: ...)`
    static func ic_problem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_problem, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_prompt03", bundle: ..., traitCollection: ...)`
    static func ic_prompt03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_prompt03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_promptbg3", bundle: ..., traitCollection: ...)`
    static func ic_promptbg3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_promptbg3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_promptflash01", bundle: ..., traitCollection: ...)`
    static func ic_promptflash01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_promptflash01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_promptflash02", bundle: ..., traitCollection: ...)`
    static func ic_promptflash02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_promptflash02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_question", bundle: ..., traitCollection: ...)`
    static func ic_question(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_question, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_quit", bundle: ..., traitCollection: ...)`
    static func ic_quit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_quit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_saysth", bundle: ..., traitCollection: ...)`
    static func ic_saysth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_saysth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_setting", bundle: ..., traitCollection: ...)`
    static func ic_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sharetosb", bundle: ..., traitCollection: ...)`
    static func ic_sharetosb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sharetosb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_socket", bundle: ..., traitCollection: ...)`
    static func ic_socket(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_socket, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_socket2", bundle: ..., traitCollection: ...)`
    static func ic_socket2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_socket2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_socketbg", bundle: ..., traitCollection: ...)`
    static func ic_socketbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_socketbg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_socketbg001", bundle: ..., traitCollection: ...)`
    static func ic_socketbg001(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_socketbg001, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_sun", bundle: ..., traitCollection: ...)`
    static func ic_sun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sun, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_switch_off", bundle: ..., traitCollection: ...)`
    static func ic_switch_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_switch_off, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_switch_on", bundle: ..., traitCollection: ...)`
    static func ic_switch_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_switch_on, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_temperature", bundle: ..., traitCollection: ...)`
    static func ic_temperature(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_temperature, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_topbg", bundle: ..., traitCollection: ...)`
    static func ic_topbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_topbg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_topbg02", bundle: ..., traitCollection: ...)`
    static func ic_topbg02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_topbg02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_topbg03", bundle: ..., traitCollection: ...)`
    static func ic_topbg03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_topbg03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_topbg04", bundle: ..., traitCollection: ...)`
    static func ic_topbg04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_topbg04, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_topbg05", bundle: ..., traitCollection: ...)`
    static func ic_topbg05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_topbg05, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_turnon", bundle: ..., traitCollection: ...)`
    static func ic_turnon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_turnon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_voice01", bundle: ..., traitCollection: ...)`
    static func ic_voice01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_voice01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_voice02", bundle: ..., traitCollection: ...)`
    static func ic_voice02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_voice02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_weather", bundle: ..., traitCollection: ...)`
    static func ic_weather(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_weather, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_wifi ", bundle: ..., traitCollection: ...)`
    static func ic_wifi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wifi, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_youtube", bundle: ..., traitCollection: ...)`
    static func ic_youtube(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_youtube, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon", bundle: ..., traitCollection: ...)`
    static func icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "topbg", bundle: ..., traitCollection: ...)`
    static func topbg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.topbg, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `DeviceCollectionViewCell`.
    static let deviceCollectionViewCell = _R.nib._DeviceCollectionViewCell()
    /// Nib `SceneCollectionViewCell`.
    static let sceneCollectionViewCell = _R.nib._SceneCollectionViewCell()
    /// Nib `SelectCountryTableViewCell`.
    static let selectCountryTableViewCell = _R.nib._SelectCountryTableViewCell()
    /// Nib `WiFiInfoView`.
    static let wiFiInfoView = _R.nib._WiFiInfoView()
    
    /// `UINib(name: "DeviceCollectionViewCell", in: bundle)`
    static func deviceCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceCollectionViewCell)
    }
    
    /// `UINib(name: "SceneCollectionViewCell", in: bundle)`
    static func sceneCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sceneCollectionViewCell)
    }
    
    /// `UINib(name: "SelectCountryTableViewCell", in: bundle)`
    static func selectCountryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectCountryTableViewCell)
    }
    
    /// `UINib(name: "WiFiInfoView", in: bundle)`
    static func wiFiInfoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wiFiInfoView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 8 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DeviceListCollectionReusableView`.
    static let deviceListCollectionReusableView: Rswift.ReuseIdentifier<DeviceListCollectionReusableView> = Rswift.ReuseIdentifier(identifier: "DeviceListCollectionReusableView")
    /// Reuse identifier `DeviceSharedUserTableViewCell`.
    static let deviceSharedUserTableViewCell: Rswift.ReuseIdentifier<DeviceSharedUserTableViewCell> = Rswift.ReuseIdentifier(identifier: "DeviceSharedUserTableViewCell")
    /// Reuse identifier `MessageTableViewCell`.
    static let messageTableViewCell: Rswift.ReuseIdentifier<MessageTableViewCell> = Rswift.ReuseIdentifier(identifier: "MessageTableViewCell")
    /// Reuse identifier `TPAccessTableViewCell`.
    static let tpAccessTableViewCell: Rswift.ReuseIdentifier<TPAccessTableViewCell> = Rswift.ReuseIdentifier(identifier: "TPAccessTableViewCell")
    /// Reuse identifier `TimeTaskTableViewCell`.
    static let timeTaskTableViewCell: Rswift.ReuseIdentifier<TimeTaskTableViewCell> = Rswift.ReuseIdentifier(identifier: "TimeTaskTableViewCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell")
    /// Reuse identifier `deviceSceneCell`.
    static let deviceSceneCell: Rswift.ReuseIdentifier<DeviceSceneCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "deviceSceneCell")
    /// Reuse identifier `selectWeekCell`.
    static let selectWeekCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "selectWeekCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `DeviceDetailTableViewController`, and contains static references to 4 segues.
    struct deviceDetailTableViewController {
      /// Segue identifier `deviceDetailToDevicePowerSegue`.
      static let deviceDetailToDevicePowerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DeviceDetailTableViewController, DevicePowerBriefViewController> = Rswift.StoryboardSegueIdentifier(identifier: "deviceDetailToDevicePowerSegue")
      /// Segue identifier `deviceDetailToDeviceSetAliasSegue`.
      static let deviceDetailToDeviceSetAliasSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DeviceDetailTableViewController, DeviceSetAliasTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "deviceDetailToDeviceSetAliasSegue")
      /// Segue identifier `deviceDetailToDeviceSharedUserSegue`.
      static let deviceDetailToDeviceSharedUserSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DeviceDetailTableViewController, DeviceSharedUserTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "deviceDetailToDeviceSharedUserSegue")
      /// Segue identifier `deviceDetailToTimeTaskSegue`.
      static let deviceDetailToTimeTaskSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DeviceDetailTableViewController, TimeTaskTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "deviceDetailToTimeTaskSegue")
      
      /// Optionally returns a typed version of segue `deviceDetailToDevicePowerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func deviceDetailToDevicePowerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DeviceDetailTableViewController, DevicePowerBriefViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.deviceDetailTableViewController.deviceDetailToDevicePowerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `deviceDetailToDeviceSetAliasSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func deviceDetailToDeviceSetAliasSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DeviceDetailTableViewController, DeviceSetAliasTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.deviceDetailTableViewController.deviceDetailToDeviceSetAliasSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `deviceDetailToDeviceSharedUserSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func deviceDetailToDeviceSharedUserSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DeviceDetailTableViewController, DeviceSharedUserTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.deviceDetailTableViewController.deviceDetailToDeviceSharedUserSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `deviceDetailToTimeTaskSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func deviceDetailToTimeTaskSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DeviceDetailTableViewController, TimeTaskTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.deviceDetailTableViewController.deviceDetailToTimeTaskSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `SEGUE_RESETPSD`.
      static let segue_RESETPSD: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, LoginCheckPhoneViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SEGUE_RESETPSD")
      
      /// Optionally returns a typed version of segue `SEGUE_RESETPSD`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segue_RESETPSD(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, LoginCheckPhoneViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.segue_RESETPSD, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ShareDeviceDetailTableViewController`, and contains static references to 2 segues.
    struct shareDeviceDetailTableViewController {
      /// Segue identifier `shareDeviceDetailToDevicePowerSegue`.
      static let shareDeviceDetailToDevicePowerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ShareDeviceDetailTableViewController, DevicePowerBriefViewController> = Rswift.StoryboardSegueIdentifier(identifier: "shareDeviceDetailToDevicePowerSegue")
      /// Segue identifier `shareDeviceDetailToDeviceSetAliasSegue`.
      static let shareDeviceDetailToDeviceSetAliasSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ShareDeviceDetailTableViewController, DeviceSetAliasTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "shareDeviceDetailToDeviceSetAliasSegue")
      
      /// Optionally returns a typed version of segue `shareDeviceDetailToDevicePowerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func shareDeviceDetailToDevicePowerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ShareDeviceDetailTableViewController, DevicePowerBriefViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.shareDeviceDetailTableViewController.shareDeviceDetailToDevicePowerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `shareDeviceDetailToDeviceSetAliasSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func shareDeviceDetailToDeviceSetAliasSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ShareDeviceDetailTableViewController, DeviceSetAliasTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.shareDeviceDetailTableViewController.shareDeviceDetailToDeviceSetAliasSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `TimeTaskTableViewController`, and contains static references to 1 segues.
    struct timeTaskTableViewController {
      /// Segue identifier `timeTaskToAddTimeTaskSegue`.
      static let timeTaskToAddTimeTaskSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, TimeTaskTableViewController, RTRootNavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "timeTaskToAddTimeTaskSegue")
      
      /// Optionally returns a typed version of segue `timeTaskToAddTimeTaskSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func timeTaskToAddTimeTaskSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, TimeTaskTableViewController, RTRootNavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.timeTaskTableViewController.timeTaskToAddTimeTaskSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `DeviceConfig`.
    static let deviceConfig = _R.storyboard.deviceConfig()
    /// Storyboard `Device`.
    static let device = _R.storyboard.device()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Scene`.
    static let scene = _R.storyboard.scene()
    /// Storyboard `Seting`.
    static let seting = _R.storyboard.seting()
    
    /// `UIStoryboard(name: "Device", bundle: ...)`
    static func device(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.device)
    }
    
    /// `UIStoryboard(name: "DeviceConfig", bundle: ...)`
    static func deviceConfig(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.deviceConfig)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Scene", bundle: ...)`
    static func scene(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.scene)
    }
    
    /// `UIStoryboard(name: "Seting", bundle: ...)`
    static func seting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.seting)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 17 localization keys.
    struct localizable {
      /// zh-Hans translation: 共享的设备
      /// 
      /// Locales: zh-Hans, ja, en
      static let shared_DEVICE = Rswift.StringResource(key: "SHARED_DEVICE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 删除
      /// 
      /// Locales: zh-Hans, ja, en
      static let deletE = Rswift.StringResource(key: "DELETE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans, ja, en
      static let canceL = Rswift.StringResource(key: "CANCEL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 备注
      /// 
      /// Locales: zh-Hans, ja, en
      static let remarK = Rswift.StringResource(key: "REMARK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 已关闭
      /// 
      /// Locales: zh-Hans, ja, en
      static let switch_OFF = Rswift.StringResource(key: "SWITCH_OFF", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 已开启
      /// 
      /// Locales: zh-Hans, ja, en
      static let switch_ON = Rswift.StringResource(key: "SWITCH_ON", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 您还没有收到消息通知
      /// 
      /// Locales: zh-Hans, ja, en
      static let no_NOTIFICATION = Rswift.StringResource(key: "NO_NOTIFICATION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 您还没有添加定时开启~
      /// 
      /// Locales: zh-Hans, ja, en
      static let notimetasK = Rswift.StringResource(key: "NOTIMETASK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 我的设备
      /// 
      /// Locales: zh-Hans, ja, en
      static let my_DEVICE = Rswift.StringResource(key: "MY_DEVICE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 未设置昵称
      /// 
      /// Locales: zh-Hans, ja, en
      static let un_SET_NIKENAME = Rswift.StringResource(key: "UN_SET_NIKENAME", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 没有共享设备给好友~
      /// 
      /// Locales: zh-Hans, ja, en
      static let no_SHAREDUSER = Rswift.StringResource(key: "NO_SHAREDUSER", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 添加设备，开启智能生活
      /// 
      /// Locales: zh-Hans, ja, en
      static let add_DEVICE = Rswift.StringResource(key: "ADD_DEVICE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 照相
      /// 
      /// Locales: zh-Hans, ja, en
      static let take_PICTURE = Rswift.StringResource(key: "TAKE_PICTURE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 相册
      /// 
      /// Locales: zh-Hans, ja, en
      static let photo_ALBUM = Rswift.StringResource(key: "PHOTO_ALBUM", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans, ja, en
      static let confirM = Rswift.StringResource(key: "CONFIRM", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 网络出现问题，请检查网络
      /// 
      /// Locales: zh-Hans, ja, en
      static let no_NETWORK = Rswift.StringResource(key: "NO_NETWORK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      /// zh-Hans translation: 设置备注
      /// 
      /// Locales: zh-Hans, ja, en
      static let set_REMARK = Rswift.StringResource(key: "SET_REMARK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "ja", "en"], comment: nil)
      
      /// zh-Hans translation: 共享的设备
      /// 
      /// Locales: zh-Hans, ja, en
      static func shared_DEVICE(_: Void = ()) -> String {
        return NSLocalizedString("SHARED_DEVICE", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 删除
      /// 
      /// Locales: zh-Hans, ja, en
      static func deletE(_: Void = ()) -> String {
        return NSLocalizedString("DELETE", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 取消
      /// 
      /// Locales: zh-Hans, ja, en
      static func canceL(_: Void = ()) -> String {
        return NSLocalizedString("CANCEL", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 备注
      /// 
      /// Locales: zh-Hans, ja, en
      static func remarK(_: Void = ()) -> String {
        return NSLocalizedString("REMARK", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已关闭
      /// 
      /// Locales: zh-Hans, ja, en
      static func switch_OFF(_: Void = ()) -> String {
        return NSLocalizedString("SWITCH_OFF", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 已开启
      /// 
      /// Locales: zh-Hans, ja, en
      static func switch_ON(_: Void = ()) -> String {
        return NSLocalizedString("SWITCH_ON", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没有收到消息通知
      /// 
      /// Locales: zh-Hans, ja, en
      static func no_NOTIFICATION(_: Void = ()) -> String {
        return NSLocalizedString("NO_NOTIFICATION", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 您还没有添加定时开启~
      /// 
      /// Locales: zh-Hans, ja, en
      static func notimetasK(_: Void = ()) -> String {
        return NSLocalizedString("NOTIMETASK", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的设备
      /// 
      /// Locales: zh-Hans, ja, en
      static func my_DEVICE(_: Void = ()) -> String {
        return NSLocalizedString("MY_DEVICE", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 未设置昵称
      /// 
      /// Locales: zh-Hans, ja, en
      static func un_SET_NIKENAME(_: Void = ()) -> String {
        return NSLocalizedString("UN_SET_NIKENAME", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 没有共享设备给好友~
      /// 
      /// Locales: zh-Hans, ja, en
      static func no_SHAREDUSER(_: Void = ()) -> String {
        return NSLocalizedString("NO_SHAREDUSER", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 添加设备，开启智能生活
      /// 
      /// Locales: zh-Hans, ja, en
      static func add_DEVICE(_: Void = ()) -> String {
        return NSLocalizedString("ADD_DEVICE", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 照相
      /// 
      /// Locales: zh-Hans, ja, en
      static func take_PICTURE(_: Void = ()) -> String {
        return NSLocalizedString("TAKE_PICTURE", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 相册
      /// 
      /// Locales: zh-Hans, ja, en
      static func photo_ALBUM(_: Void = ()) -> String {
        return NSLocalizedString("PHOTO_ALBUM", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans, ja, en
      static func confirM(_: Void = ()) -> String {
        return NSLocalizedString("CONFIRM", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 网络出现问题，请检查网络
      /// 
      /// Locales: zh-Hans, ja, en
      static func no_NETWORK(_: Void = ()) -> String {
        return NSLocalizedString("NO_NETWORK", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 设置备注
      /// 
      /// Locales: zh-Hans, ja, en
      static func set_REMARK(_: Void = ()) -> String {
        return NSLocalizedString("SET_REMARK", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DeviceCollectionViewCell.validate()
      try _SceneCollectionViewCell.validate()
      try _WiFiInfoView.validate()
    }
    
    struct _DeviceCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DeviceCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DeviceCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_socket", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_socket' is used in nib 'DeviceCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_choose3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose3' is used in nib 'DeviceCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SceneCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SceneCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SceneCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SceneCollectionViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_home' is used in nib 'SceneCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_choose3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_choose3' is used in nib 'SceneCollectionViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SelectCountryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SelectCountryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SelectCountryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectCountryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _WiFiInfoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WiFiInfoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> WiFiInfoView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WiFiInfoView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_off01", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_off01' is used in nib 'WiFiInfoView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try login.validate()
      try deviceConfig.validate()
      try scene.validate()
      try device.validate()
      try profile.validate()
    }
    
    struct device: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RTRootNavigationController
      
      let addShareUserSecondViewController = StoryboardViewControllerResource<AddShareUserSecondViewController>(identifier: "AddShareUserSecondViewController")
      let addTimeTaskNavigationCotroller = StoryboardViewControllerResource<RTRootNavigationController>(identifier: "AddTimeTaskNavigationCotroller")
      let addTimeTaskTableViewController = StoryboardViewControllerResource<AddTimeTaskTableViewController>(identifier: "AddTimeTaskTableViewController")
      let bundle = R.hostingBundle
      let deviceDetailTableViewController = StoryboardViewControllerResource<DeviceDetailTableViewController>(identifier: "DeviceDetailTableViewController")
      let devicePowerBriefViewController = StoryboardViewControllerResource<DevicePowerBriefViewController>(identifier: "DevicePowerBriefViewController")
      let devicePowerDetailViewController = StoryboardViewControllerResource<DevicePowerDetailViewController>(identifier: "DevicePowerDetailViewController")
      let deviceSetAliasTableViewController = StoryboardViewControllerResource<DeviceSetAliasTableViewController>(identifier: "DeviceSetAliasTableViewController")
      let deviceTypeSelectViewController = StoryboardViewControllerResource<DeviceTypeSelectViewController>(identifier: "DeviceTypeSelectViewController")
      let name = "Device"
      let shareDeviceDetailTableViewController = StoryboardViewControllerResource<ShareDeviceDetailTableViewController>(identifier: "ShareDeviceDetailTableViewController")
      let switchViewController = StoryboardViewControllerResource<SwitchViewController>(identifier: "SwitchViewController")
      
      func addShareUserSecondViewController(_: Void = ()) -> AddShareUserSecondViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addShareUserSecondViewController)
      }
      
      func addTimeTaskNavigationCotroller(_: Void = ()) -> RTRootNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addTimeTaskNavigationCotroller)
      }
      
      func addTimeTaskTableViewController(_: Void = ()) -> AddTimeTaskTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addTimeTaskTableViewController)
      }
      
      func deviceDetailTableViewController(_: Void = ()) -> DeviceDetailTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceDetailTableViewController)
      }
      
      func devicePowerBriefViewController(_: Void = ()) -> DevicePowerBriefViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: devicePowerBriefViewController)
      }
      
      func devicePowerDetailViewController(_: Void = ()) -> DevicePowerDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: devicePowerDetailViewController)
      }
      
      func deviceSetAliasTableViewController(_: Void = ()) -> DeviceSetAliasTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceSetAliasTableViewController)
      }
      
      func deviceTypeSelectViewController(_: Void = ()) -> DeviceTypeSelectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceTypeSelectViewController)
      }
      
      func shareDeviceDetailTableViewController(_: Void = ()) -> ShareDeviceDetailTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shareDeviceDetailTableViewController)
      }
      
      func switchViewController(_: Void = ()) -> SwitchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: switchViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_saysth") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_saysth' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sharetosb") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sharetosb' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_topbg05") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_topbg05' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_more") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_more' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_socketbg001") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_socketbg001' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_turnonturnoff1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_turnonturnoff1' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_socket2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_socket2' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_01equipment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_01equipment' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_01equipment_click") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_01equipment_click' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_topbg04") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_topbg04' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_addhome") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_addhome' is used in storyboard 'Device', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'Device', but couldn't be loaded.") }
        if _R.storyboard.device().deviceTypeSelectViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceTypeSelectViewController' could not be loaded from storyboard 'Device' as 'DeviceTypeSelectViewController'.") }
        if _R.storyboard.device().deviceSetAliasTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceSetAliasTableViewController' could not be loaded from storyboard 'Device' as 'DeviceSetAliasTableViewController'.") }
        if _R.storyboard.device().deviceDetailTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceDetailTableViewController' could not be loaded from storyboard 'Device' as 'DeviceDetailTableViewController'.") }
        if _R.storyboard.device().switchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'switchViewController' could not be loaded from storyboard 'Device' as 'SwitchViewController'.") }
        if _R.storyboard.device().devicePowerDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'devicePowerDetailViewController' could not be loaded from storyboard 'Device' as 'DevicePowerDetailViewController'.") }
        if _R.storyboard.device().shareDeviceDetailTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shareDeviceDetailTableViewController' could not be loaded from storyboard 'Device' as 'ShareDeviceDetailTableViewController'.") }
        if _R.storyboard.device().devicePowerBriefViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'devicePowerBriefViewController' could not be loaded from storyboard 'Device' as 'DevicePowerBriefViewController'.") }
        if _R.storyboard.device().addTimeTaskTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addTimeTaskTableViewController' could not be loaded from storyboard 'Device' as 'AddTimeTaskTableViewController'.") }
        if _R.storyboard.device().addTimeTaskNavigationCotroller() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addTimeTaskNavigationCotroller' could not be loaded from storyboard 'Device' as 'RTRootNavigationController'.") }
        if _R.storyboard.device().addShareUserSecondViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addShareUserSecondViewController' could not be loaded from storyboard 'Device' as 'AddShareUserSecondViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct deviceConfig: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DeviceConfigFirstViewController
      
      let bundle = R.hostingBundle
      let deviceConfigFirstViewController = StoryboardViewControllerResource<DeviceConfigFirstViewController>(identifier: "DeviceConfigFirstViewController")
      let deviceConfigSecondViewController = StoryboardViewControllerResource<DeviceConfigSecondViewController>(identifier: "DeviceConfigSecondViewController")
      let name = "DeviceConfig"
      
      func deviceConfigFirstViewController(_: Void = ()) -> DeviceConfigFirstViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceConfigFirstViewController)
      }
      
      func deviceConfigSecondViewController(_: Void = ()) -> DeviceConfigSecondViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceConfigSecondViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_prompt03") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_prompt03' is used in storyboard 'DeviceConfig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_promptflash01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_promptflash01' is used in storyboard 'DeviceConfig', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_promptbg3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_promptbg3' is used in storyboard 'DeviceConfig', but couldn't be loaded.") }
        if _R.storyboard.deviceConfig().deviceConfigFirstViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceConfigFirstViewController' could not be loaded from storyboard 'DeviceConfig' as 'DeviceConfigFirstViewController'.") }
        if _R.storyboard.deviceConfig().deviceConfigSecondViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceConfigSecondViewController' could not be loaded from storyboard 'DeviceConfig' as 'DeviceConfigSecondViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let an_LOGIN_NAV = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "AN_LOGIN_NAV")
      let bundle = R.hostingBundle
      let loginCheckPhoneViewController = StoryboardViewControllerResource<LoginCheckPhoneViewController>(identifier: "LoginCheckPhoneViewController")
      let loginCodeViewController = StoryboardViewControllerResource<LoginCodeViewController>(identifier: "LoginCodeViewController")
      let loginSetPsdViewController = StoryboardViewControllerResource<LoginSetPsdViewController>(identifier: "LoginSetPsdViewController")
      let loginViewController = StoryboardViewControllerResource<LoginViewController>(identifier: "LoginViewController")
      let name = "Login"
      let pn_LOGIN = StoryboardViewControllerResource<PNLoginViewController>(identifier: "PN_LOGIN")
      let pn_LOGIN_NAV = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "PN_LOGIN_NAV")
      
      func an_LOGIN_NAV(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: an_LOGIN_NAV)
      }
      
      func loginCheckPhoneViewController(_: Void = ()) -> LoginCheckPhoneViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginCheckPhoneViewController)
      }
      
      func loginCodeViewController(_: Void = ()) -> LoginCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginCodeViewController)
      }
      
      func loginSetPsdViewController(_: Void = ()) -> LoginSetPsdViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginSetPsdViewController)
      }
      
      func loginViewController(_: Void = ()) -> LoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginViewController)
      }
      
      func pn_LOGIN(_: Void = ()) -> PNLoginViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pn_LOGIN)
      }
      
      func pn_LOGIN_NAV(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pn_LOGIN_NAV)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_01background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_01background' is used in storyboard 'Login', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow' is used in storyboard 'Login', but couldn't be loaded.") }
        if _R.storyboard.login().an_LOGIN_NAV() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'an_LOGIN_NAV' could not be loaded from storyboard 'Login' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.login().loginSetPsdViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginSetPsdViewController' could not be loaded from storyboard 'Login' as 'LoginSetPsdViewController'.") }
        if _R.storyboard.login().pn_LOGIN() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pn_LOGIN' could not be loaded from storyboard 'Login' as 'PNLoginViewController'.") }
        if _R.storyboard.login().loginCheckPhoneViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginCheckPhoneViewController' could not be loaded from storyboard 'Login' as 'LoginCheckPhoneViewController'.") }
        if _R.storyboard.login().pn_LOGIN_NAV() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pn_LOGIN_NAV' could not be loaded from storyboard 'Login' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.login().loginCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginCodeViewController' could not be loaded from storyboard 'Login' as 'LoginCodeViewController'.") }
        if _R.storyboard.login().loginViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginViewController' could not be loaded from storyboard 'Login' as 'LoginViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = TabBarViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RTRootNavigationController
      
      let bundle = R.hostingBundle
      let feedBack = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "FeedBack")
      let messageDetailViewController = StoryboardViewControllerResource<MessageDetailViewController>(identifier: "MessageDetailViewController")
      let name = "Profile"
      let profileTableViewController = StoryboardViewControllerResource<ProfileTableViewController>(identifier: "ProfileTableViewController")
      
      func feedBack(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedBack)
      }
      
      func messageDetailViewController(_: Void = ()) -> MessageDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: messageDetailViewController)
      }
      
      func profileTableViewController(_: Void = ()) -> ProfileTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileTableViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_information") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_information' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow03") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow03' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_link") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_link' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_echo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_echo' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_setting") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_setting' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_topbg03") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_topbg03' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_problem") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_problem' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic-about") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-about' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_opinion") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_opinion' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_isukeloge02") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_isukeloge02' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_03user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_03user' is used in storyboard 'Profile', but couldn't be loaded.") }
        if _R.storyboard.profile().messageDetailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'messageDetailViewController' could not be loaded from storyboard 'Profile' as 'MessageDetailViewController'.") }
        if _R.storyboard.profile().feedBack() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedBack' could not be loaded from storyboard 'Profile' as 'UIKit.UIViewController'.") }
        if _R.storyboard.profile().profileTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileTableViewController' could not be loaded from storyboard 'Profile' as 'ProfileTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct scene: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RTRootNavigationController
      
      let addSceneNavigationController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "AddSceneNavigationController")
      let addSceneTableViewController = StoryboardViewControllerResource<AddSceneTableViewController>(identifier: "AddSceneTableViewController")
      let bundle = R.hostingBundle
      let name = "Scene"
      let sceneViewController = StoryboardViewControllerResource<SceneViewController>(identifier: "SceneViewController")
      
      func addSceneNavigationController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addSceneNavigationController)
      }
      
      func addSceneTableViewController(_: Void = ()) -> AddSceneTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addSceneTableViewController)
      }
      
      func sceneViewController(_: Void = ()) -> SceneViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sceneViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ic_topbg02") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_topbg02' is used in storyboard 'Scene', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_02mode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_02mode' is used in storyboard 'Scene', but couldn't be loaded.") }
        if _R.storyboard.scene().sceneViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sceneViewController' could not be loaded from storyboard 'Scene' as 'SceneViewController'.") }
        if _R.storyboard.scene().addSceneNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addSceneNavigationController' could not be loaded from storyboard 'Scene' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.scene().addSceneTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addSceneTableViewController' could not be loaded from storyboard 'Scene' as 'AddSceneTableViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct seting: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = SettingTableViewController
      
      let bundle = R.hostingBundle
      let name = "Seting"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
